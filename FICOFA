import pandas as pd
import numpy as np

pd.options.display.max_rows=400
pd.options.display.max_columns=400

data=pd.read_pickle("/home/fintan/tensorflow/chartdeltadone.pkl")

#data
#pt1=data[data.encounterid==10000]
#pt1
#data=df.drop(columns='charttime')

sofafs = ['pfr', 'peep', 'tv', 'peakp', 'cr','dialysis', 'uo', 'bil','plt','map_a', 'map_c', 'norad', 'adr', 'dbut']

sofa=data[data['interventionID'].isin(sofafs)]



losofs = ['pfr','plt','map_a', 'map_c']
hisofs = ['peep', 'tv', 'peakp', 'cr','dialysis', 'uo', 'bil', 'norad', 'adr', 'dbut']

loso = data[data['interventionID'].isin(losofs)]
hiso = data[data['interventionID'].isin(hisofs)]

loso['valueNum'] = loso.apply(lambda x: -x['valueNumber'], axis=1, reduce=True)

loso=loso.drop(columns='valueNumber')

loso.rename(columns={'valueNum': 'valueNumber'}, inplace=True)
loso.head()

sofam = pd.concat([loso,hiso])
sofam.head()

sofamax=sofam.groupby(['encounterid','interventionID',(pd.Grouper(key='chartdelta', freq='12H'))]).agg({'valueNumber':["max"]})
#sofa_binnedlast

dfusk = sofamax.unstack('interventionID')

dfusk_l1 = dfusk.xs('valueNumber', axis=1, drop_level=True)

dfusk_l1.head()

dfusk_l2 = dfusk_l1.xs('max', axis=1, drop_level=True)

dfusk_l2.columns.get_level_values(0).astype(str)

dfusk_flat = dfusk_l2.copy()
dfusk_flat.columns = dfusk_flat.columns.astype(str)
#dfusk_flat
#dfusk_flat['cr']
#dfusk_flat

# Data is now fixed, now we sort

sparseSorted = dfusk_flat.sort_values(['encounterid','chartdelta'],ascending=[True,True])

#sparseSorted.loc[2]

paddedSorted = sparseSorted.copy()
fillForward = ['cr', 'map_a', 'pfr', 'plt', 'bil']
eids = paddedSorted.index.droplevel(1)
eids = eids[~eids.duplicated(keep='first')]
for eid in eids:
    for iid in fillForward:
        paddedSorted.loc[eid][iid] = paddedSorted.loc[eid][iid].fillna(method='pad')

#dfusk.columns.remove_unused_categories()

#pt1.plt.fillna(method='pad')

#pds=paddedSorted

paddedSorted['ventilated'] = 0
paddedSorted['ventilated'][paddedSorted['tv'].notna() & paddedSorted['peep'].notna()]  = 1

paddedSorted['cvvhd'] = 0
paddedSorted['cvvhd'][paddedSorted['dialysis'].notna() & (paddedSorted['dialysis'] >0) ] = 1

paddedSorted['shock'] = 0
paddedSorted['shock'][paddedSorted['dbut'].notna() & (paddedSorted['dbut'] > 0) ] = 1

paddedSorted['shock'][(paddedSorted['norad'].notna() & (paddedSorted['norad'] > 0)) | (paddedSorted['adr'].notna() & (paddedSorted['adr'] > 0))] = 1

paddedSorted['aki'] = 0
paddedSorted['aki'][paddedSorted['cr'].notna() & (paddedSorted['cr'] >= 170)] = 1


paddedSorted['liver'] = 0
paddedSorted['liver'][paddedSorted['bil'].notna() & (paddedSorted['bil'] > 32)] = 1

#need to add vent support

paddedSorted['oxy'] = 0
paddedSorted['oxy'][paddedSorted['pfr'].notna() & (abs(paddedSorted['pfr']) < 40) ] = 1

paddedSorted['marrow'] = 0
paddedSorted['marrow'][paddedSorted['plt'].notna() & (abs(paddedSorted['plt']) < 150)] = 1


paddedSorted['FiCOF'] = 0
paddedSorted['FiCOF'] = paddedSorted['aki'] + paddedSorted['liver'] + paddedSorted['oxy'] + paddedSorted['marrow'] + paddedSorted['shock'] + paddedSorted['ventilated'] + paddedSorted['cvvhd']



#paddedSorted['SOFADelta'] = paddedSorted['SOFA'].diff()



paddedSorted.head()

pt=paddedSorted.loc[3169]
pt.plot(y='FiCOF')


paddedSorted['FiCOF'].head()

paddedSorted['SOFA'].to_pickle('/home/fintan/tensorflow/targets/SOFAs.pkl')
